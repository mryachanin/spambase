package neural_network;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Random;

/**
 * Represents a perceptron in an artificial neural network.
 *  
 * @author Michael Yachanin (mry1294)
 */
public class Perceptron implements Serializable {
	
	private static final long serialVersionUID = 6743181867327070353L;
	
	private final int NUM_INPUTS;
	private double[] weightedInputs;
	private double[] weights;
	private double sum;
	private double transferValue;
	
	/**
	 * Construct a perceptron.
	 *  
	 * @param numInputs: The number of inputs connected to this perceptron.
	 */
	public Perceptron(int numInputs) {
		NUM_INPUTS = numInputs;
		
		weightedInputs = new double[NUM_INPUTS];
		weights = new double[NUM_INPUTS];
		
		Random rand = new Random();
		for (int i = 0; i < NUM_INPUTS; i++) {
			weights[i] = -1 + 2*rand.nextDouble();
		}
		sum = -1;
		transferValue = -1;
	}
	
	
	/**
	 * Aggregates the weighted inputs connected to this perceptron.
	 * 
	 * @param inputs: An array of inputs to aggregate.
	 * 
	 * @throws IllegalArgumentException: input array length must be equal to the 
	 * number of inputs given upon instantiation.
	 */
	protected void generateWeightedInputs(double[] inputs) {
		if (inputs.length != NUM_INPUTS) {
			String errorStr = "The number of given inputs is not equal to the number of expected inputs.";
			throw new IllegalArgumentException(errorStr);
		}
		
		for (int i = 0; i < inputs.length; i++) {
			weightedInputs[i] = inputs[i] * weights[i];
		}
	}
	
	
	/**
	 * Aggregates the weighted inputs connected to this perceptron.
	 */
	protected void sum() {
		sum = 0;
		for (double d : weightedInputs) {
			sum += d;
		}
		sum /= weightedInputs.length;
	}
	
	
	/**
	 * Implements a sigmoid function that converts the weighted inputs' sum
	 * to a value between 0 and 1.
	 */
	protected void transfer() {
		transferValue = 1 / (1 + Math.pow(Math.E, -sum));
	}
	
	
	/**
	 * Returns an output based on the aggregation and transformation
	 * of the weighted inputs passed in.
	 *  
	 * @param inputs: An array of inputs to aggregate.
	 * @return: Boolean output based on value generated by transfer function.
	 */
	public double getOutput(double[] inputs) {
		generateWeightedInputs(inputs);
		sum();
		transfer();
		return transferValue;
	}
	
	
	/**
	 * Returns the output of this perceptron.
	 * 
	 * @return: The output from this perceptron.
	 */
	public double getOutput() {
		if (transferValue == -1) {
			throw new IllegalStateException("This perceptron has not fired yet.");
		}
		return transferValue;
	}
	
	
	/**
	 * Returns the weights of the inputs connected to this perceptron.
	 * 
	 * @return: The weights of the inputs connected to this perceptron.
	 */
	public double[] getWeights() {
		return weights;
	}
	
	
	/**
	 * Updates the weights of the inputs connected to this perceptron.
	 * Used during backpropagation to train the perceptron.
	 *  
	 * @param weightDeltas: An array of deltas to add to the current input weights.
	 */
	public void updateWeights(double[] weightDeltas) {
		for (int i=0; i < weights.length; i++) {
			weights[i] += weightDeltas[i];
		}
	}
	
	
	@Override
	public String toString() {
		return Arrays.toString(weights);
	}
}
